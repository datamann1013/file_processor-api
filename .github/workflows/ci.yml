name: CI Pipeline

on:
  pull_request:
    branches: [test, master]
  push:
    branches: [test, master]

jobs:
  build-on-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build & Test
        run: cargo test -- --nocapture

  dev-to-test:
    if: github.event.pull_request.base.ref == 'test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Lint with Clippy
        run: cargo clippy -- -D warnings

      - name: License & Duplicate Check
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          manifest-path: ./Cargo.toml
          log-level: warn
          command: check
          arguments: |
          command-arguments: |
            --config deny.toml
            --deny warnings
            licenses
            sources

      - name: Supply-chain & security score (OSSF Scorecard)
        uses: ossf/scorecard-action@v2.4.1
        with:
          publish-results: false
          results_file: 'scorecard_results.json'
          results_format: 'json'

      - name: Install cargo-geiger
        run: cargo install cargo-geiger --locked --force

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Build the crate
        run: cargo build

      - name: Geiger safety check (crate only)
        shell: bash
        run: |
          echo "üîç Running cargo-geiger‚Ä¶"
          cargo geiger > geiger_output.txt || true

          echo "üìÑ Geiger output:"
          cat geiger_output.txt

          # Check your crate
          CRATE_LINE=$(grep -E '\s+file_processor_api' geiger_output.txt || true)

          if [[ -z "$CRATE_LINE" ]]; then
            echo "‚ö†Ô∏è Could not find your crate in Geiger output. Skipping failure."
            exit 0
          fi

          echo "üìå Unsafe summary for your crate:"
          echo "$CRATE_LINE"

          if echo "$CRATE_LINE" | grep -q '!'; then
            echo "‚ùå Unsafe code found in your crate. Failing build."
            exit 1
          else
            echo "‚úÖ Your crate is 100% safe."
          fi

          # Check dependencies
          grep -v 'file_processor_api' geiger_output.txt | grep '!' > dependency_unsafe.txt || true

          if [[ -s dependency_unsafe.txt ]]; then
            echo "dep_unsafe=true" >> $GITHUB_ENV
          else
            echo "dep_unsafe=false" >> $GITHUB_ENV
          fi

      - name: Read unsafe dependency list
        id: read_unsafe_deps
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT
          cat dependency_unsafe.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send email if unsafe dependencies are found
        if: env.dep_unsafe == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: webmail.ringcom.no
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "‚ö†Ô∏è Unsafe Rust dependencies detected in CI"
          to: data0@rommesmo.no
          from: no-reply@rommesmo.no
          body: |
            The following dependencies contain unsafe code:

            ${{ steps.read_unsafe_deps.outputs.body }}

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Set up Rust nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Fuzz testing
        run: cargo +nightly fuzz run fuzz_target_1 -- -max_total_time=60

      - name: Run unit tests
        run: cargo test -- --nocapture

  test-to-master:
    if: github.event.pull_request.base.ref == 'master'
    needs: dev-to-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run integration tests
        run: |
          cargo test --test integration -- --nocapture

      - name: Manual approval
        if: github.actor == 'datamann1013'
        uses: hmarr/auto-approve-action@v2
