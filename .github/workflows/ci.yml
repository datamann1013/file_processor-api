# .github/workflows/ci.yml
name: CI Pipeline

on:
  pull_request:
    branches: [test, master]
  push:
    branches: [test, master]

jobs:
  build-on-push:
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build & Test
        run: cargo test -- --nocapture

  dev-to-test:
    if: github.event.pull_request.base.ref == 'test'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Lint with Clippy
        run: cargo clippy -- -D warnings


      - name: License & Duplicate Check
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
            manifest-path: ./Cargo.toml
            log-level: warn
            command: check
            # leave `arguments:` empty (or only global flags like `--all-features` if you needed them)
            arguments: |
            command-arguments: |
              --config deny.toml
              --deny warnings
              licenses
              sources

      - name: Supply-chain & security score (OSSF Scorecard)
        uses: ossf/scorecard-action@v2.4.1
        with:
          publish-results: false
          results_file: 'scorecard_results.json'
          results_format: 'json'

      - name: Install cargo-geiger
        run: |
          cargo install cargo-geiger --locked

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Geiger report (crate vs dependencies)
        shell: bash
        run: |
            echo "üîç Running cargo-geiger in JSON mode‚Ä¶"

            # Run geiger, merge stderr/stdout, drop only the artifact lines:
            cargo geiger --format json 2>&1 \
              | grep -v '^\{"\$message_type"' > geiger.json || true

            echo "::group::üö´ Unsafe in YOUR CRATE"
            jq -r '
            .crates[]
            | select(.name=="file_processor_api")
            | "\(.unsafe_expressions)/\(.total_expressions) unsafe exprs, \(.unsafe_functions)/\(.total_functions) unsafe fns"
            ' geiger.json
            echo "::endgroup::"

            echo "::group::‚ÑπÔ∏è Unsafe in DEPENDENCIES"
            jq -r '
            .crates[]
            | select(.name!="file_processor_api")
            | select((.unsafe_expressions + .unsafe_functions) > 0)
            | "\(.name) ‚Äì \(.unsafe_expressions)/\(.total_expressions) exprs, \(.unsafe_functions)/\(.total_functions) fns"
            ' geiger.json || echo "(none)"
            echo "::endgroup::"

            # Compute your crate's unsafe total, defaulting to 0 if missing:
            CRATE_UNSAFE=$(jq -r '
            (.crates[]
            | select(.name=="file_processor_api")
            | (.unsafe_expressions + .unsafe_functions)
            ) // 0
            ' geiger.json)

            if [ "$CRATE_UNSAFE" -gt 0 ]; then
            echo "‚ùå Your crate contains $CRATE_UNSAFE unsafe items, failing build."
            exit 1
            else
            echo "‚úÖ Your crate is 100% safe."
            fi

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Fuzz testing
        run: cargo fuzz run -- -max_total_time=60

      - name: Run unit tests
        run: cargo test -- --nocapture

  test-to-master:
    if: github.event.pull_request.base.ref == 'master'
    needs: dev-to-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Run integration tests
        run: |
          cargo test --test integration -- --nocapture

      - name: Manual approval
        if: github.actor == 'datamann1013'
        uses: hmarr/auto-approve-action@v2
